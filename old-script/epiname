#!/bin/bash

set -eu

show_help() {
cat << EOF
Usage: epiname [OPTIONS] show_name

A convenient script that searches for the titles of, and renames, a show or anime.

Options:
-h              Print this message and exit.
-e              Open the titles for editing before applying changes.
-d DEST_DIR     Directory to be worked on; defaults to $PWD.
-f SRC_FILE     File to get titles from; defaults to online.
EOF
}

say_err() { echo "Error: ${1}" >&2 && exit 1; }

run_scraper() {
if python3 ./scraper.py "${show_name}" "${title_file}" 2> /dev/null; then
  sed -i '/^List of.*episodes$/d;/^Release$/d;s/^"//g;s/".*$//g;s/:/-/g;s/\?/_/g' "${title_file}"
else
  say_err "the scraper failed with error code $?"
fi
}

# Populate array: titles
build_titles_array() {
while read -r line; do
  titles+=("$line")
done < "${title_file}"
}

# Populate arrays: files; ext
build_other_arrays() {
for file in "${dest_dir}"/*; do
  if [[ -d "${file}" ]]; then
    if [[ "$(basename "${file}")" =~ ^Season\ [0-9]?[0-9]?[0-9]$ ]]; then
      declare sub_dir="${file%%/}"
      for sub_file in "${sub_dir}"/*; do
        if [[ -d "${sub_file}" ]]; then
          if [[ "$(basename "${sub_file}")" =~ ^Part\ [0-9]?[0-9]$ ]]; then
            declare sub_sub_dir="${sub_file%%/}"
            for sub_sub_file in "${sub_sub_dir}"/*; do
              if [[ -f "${sub_sub_file}" ]]; then 
                case "${sub_sub_file##*.}" in
                  mkv|mp4|avi)
                    files+=("${sub_sub_file%.*}")
                    ext+=("${sub_sub_file##*.}")
                    ;;
                esac
              fi
            done
          fi
        elif [[ -f "${sub_file}" ]]; then
          case "${sub_file##*.}" in
            mkv|mp4|avi)
              files+=("${sub_file%.*}")
              ext+=("${sub_file##*.}")
              ;;
          esac
        fi
      done
    fi
  elif [[ -f "${file}" ]]; then
    case "${file##*.}" in
      mkv|mp4|avi)
        files+=("${file%.*}")
        ext+=("${file##*.}")
        ;;
    esac
  fi
done
}

# Rename files
rename_files() {
if [[ "${#files[@]}" -eq "${#titles[@]}" ]]; then
  for i in "${!files[@]}"; do
    mv "${files[i]}.${ext[i]}" "${files[i]} - ${titles[i]}.${ext[i]}"
  done
elif [[ "${#files[@]}" -gt "${#titles[@]}" ]]; then
  say_err "there are more files (${#files[@]}) than titles (${#titles[@]})."
elif [[ "${#files[@]}" -lt "${#titles[@]}" ]]; then
  say_err "there are more titles (${#titles[@]}) than files (${#files[@]})."
else
  say_err "the number of files (${#files[@]}) and titles (${#titles[@]}) do not match."
fi
}

main() {
[[ "$#" -lt 1 ]] && say_err "atleast one argument expected."

declare dest_dir=""
declare title_file=""
declare run_scraper="Y"
declare edit_titles="N"

while getopts ":hed:f:" arg; do
  case $arg in
    h) show_help; exit 0 ;;
    e) edit_titles="Y" ;;
    d) # Set destination directory
      if [[ -d "${OPTARG}" ]]; then
        dest_dir="${OPTARG%%/}"
      else
        say_err "${OPTARG} is not a directory."
      fi
      ;;
    f) # Set source titles file
      if [[ -f "${OPTARG}" ]]; then
        title_file="${OPTARG}"
        run_scraper="N"
      else
        say_err "${OPTARG} is not a file."
      fi
      ;;
    :) say_err "-${OPTARG} requires an argument." ;;
    ?) say_err "-${OPTARG} is an invalid option." ;;
  esac
done
shift $((OPTIND - 1))

[[ -z "${dest_dir}" ]] && dest_dir="$(pwd)"
[[ -z "${title_file}" ]] && title_file="$(mktemp)"

if [[ ! "${!#}" =~ ^-.*$ ]]; then
  if [[ ! "${!#}" == "$0" ]]; then
    declare show_name="${!#}"
  else
    say_err "please enter the name of a show."
  fi
else
  say_err "${!#} is not a valid show name."
fi

if [[ "${run_scraper}" == "Y" ]]; then
  run_scraper
fi

if [[ "${edit_titles}" == "Y" ]]; then
  "${EDITOR:-vi}" "${title_file}"
fi

declare -a titles=()
build_titles_array

declare -a files=()
declare -a ext=()
build_other_arrays

rename_files
}

main "$@"